# tg_part_laptop.py

import os
import re
import json
from datetime import datetime
from contextlib import asynccontextmanager

from telegram import Update, error
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from fastapi import FastAPI, Request, Response
import google.generativeai as genai

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
TOKEN = os.getenv("TOKEN")
# ID –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º (–≤–∞—à user_id)
TARGET_CHAT_ID = os.getenv("TARGET_CHAT_ID")
# ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
MESSAGE_ID_TO_EDIT = os.getenv("MESSAGE_ID_TO_EDIT")

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel("gemini-2.5-flash")
else:
    model = None

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def parse_tasks_from_text(text: str) -> list:
    """–ü–∞—Ä—Å–∏—Ç –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    if not text: return []
    tasks, lines = [], text.split('\n')[1:]
    pattern = re.compile(r'^\d+\.\s+(.*?)(?:\s+\(([^)]+)\))?$')
    for line in lines:
        line = line.strip().replace('‚ùå ~', '').replace('~ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)', '').replace('‚ö†Ô∏è *', '').replace('*', '')
        if not line: continue
        match = pattern.match(line)
        if match:
            task_text = match.group(1).strip()
            deadline_str = match.group(2) if match.group(2) and re.match(r'\d{4}-\d{2}-\d{2}', match.group(2)) else None
            tasks.append({"task": task_text, "deadline": deadline_str})
    return tasks

async def get_tasks_from_message(context: ContextTypes.DEFAULT_TYPE) -> list:
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á."""
    if not (TARGET_CHAT_ID and MESSAGE_ID_TO_EDIT): return []
    try:
        msg = await context.bot.get_message(chat_id=TARGET_CHAT_ID, message_id=MESSAGE_ID_TO_EDIT)
        return parse_tasks_from_text(msg.text)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏: {e}")
        return []

async def update_tasks_message(context: ContextTypes.DEFAULT_TYPE, tasks: list):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
    if not (TARGET_CHAT_ID and MESSAGE_ID_TO_EDIT):
        print("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return
    
    text = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n"
    if not tasks:
        text += "_–ó–∞–¥–∞—á –Ω–µ—Ç_"
    else:
        now = datetime.now()
        sorted_tasks = sorted(tasks, key=lambda x: datetime.strptime(x['deadline'], '%Y-%m-%d') if x['deadline'] else datetime.max)
        for i, t in enumerate(sorted_tasks, start=1):
            line = t["task"]
            if t.get("deadline"):
                date = datetime.strptime(t["deadline"], "%Y-%m-%d")
                days_left = (date.date() - now.date()).days
                if days_left < 0: line = f"‚ùå ~{line}~ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)"
                elif days_left <= 2: line = f"‚ö†Ô∏è *{line}* (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)"
                else: line = f"{line} ({t['deadline']})"
            text += f"{i}. {line}\n"

    try:
        await context.bot.edit_message_text(text, chat_id=TARGET_CHAT_ID, message_id=MESSAGE_ID_TO_EDIT, parse_mode="Markdown")
    except error.BadRequest as e:
        if "message is not modified" not in str(e): print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

# --- –ö–æ–º–∞–Ω–¥—ã ---

async def setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    # ID –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ - —ç—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –±–æ—Ç—É
    user_id = update.message.from_user.id
    
    setup_msg = await update.message.reply_text("–≠—Ç–æ –±—É–¥–µ—Ç —Ç–≤–æ–µ –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á.")
    # ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - —ç—Ç–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∞–º –±–æ—Ç
    message_id_to_edit = setup_msg.message_id
    
    await setup_msg.edit_text(
        "**–≠—Ç–æ —Ç–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á.**\n\n"
        "**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:**\n"
        "1. –ó–∞–π–¥–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render.\n"
        "2. –°–æ–∑–¥–∞–π/–æ–±–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `TARGET_CHAT_ID` –≤–æ—Ç —ç—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º:\n"
        f"`{user_id}`\n"
        "3. –°–æ–∑–¥–∞–π/–æ–±–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `MESSAGE_ID_TO_EDIT` –≤–æ—Ç —ç—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º:\n"
        f"`{message_id_to_edit}`\n"
        "4. –°–æ—Ö—Ä–∞–Ω–∏. Render —Å–∞–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞.\n"
        "5. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–µ—à—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = await get_tasks_from_message(context)
    text = update.message.text.strip().lstrip('-').strip()
    tasks.append({"task": text, "deadline": None}) # –£–ø—Ä–æ—â–µ–Ω–æ, –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–≥–∏–∫—É –¥–∞—Ç—ã
    await update_tasks_message(context, tasks)
    await update.message.delete()

async def remove_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = await get_tasks_from_message(context)
    try:
        index = int(context.args[0]) - 1
        sorted_tasks_original_indices = sorted(range(len(tasks)), key=lambda k: datetime.strptime(tasks[k]['deadline'], '%Y-%m-%d') if tasks[k]['deadline'] else datetime.max)
        if 0 <= index < len(tasks):
            task_index_to_remove = sorted_tasks_original_indices[index]
            tasks.pop(task_index_to_remove)
            await update_tasks_message(context, tasks)
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.", quote=False)
    await update.message.delete()

async def ask_gemini(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùì –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return

    question = " ".join(context.args)
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    prompt = f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}\n\n–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 3500 —Å–∏–º–≤–æ–ª–æ–≤."

    waiting_msg = await update.message.reply_text("ü§î –î—É–º–∞—é...")

    # –í—ã–∑–æ–≤ Gemini
    response = await model.generate_content_async(prompt)
    answer = response.text

    await waiting_msg.delete()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await send_long_message(context, update.message.chat_id, answer)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ FastAPI ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    if TOKEN: await application.initialize()
    yield
    if TOKEN: await application.shutdown()

api = FastAPI(lifespan=lifespan)
application = Application.builder().token(TOKEN).build()

application.add_handler(CommandHandler("setup", setup))
application.add_handler(CommandHandler("remove", remove_task))
application.add_handler(CommandHandler("ask", ask_gemini))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_task))

URL_PATH = os.getenv("WEBHOOK_SECRET", "webhook")
@api.post(f"/{URL_PATH}")
async def process_telegram_update(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return Response(status_code=200)
    except Exception as e:
        print(f"Error processing update: {e}")
        return Response(status_code=500)


