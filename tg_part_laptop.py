import re

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime, timedelta
import os
import google.generativeai as genai
import asyncio


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —á–∞—Ç–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
MAIN_CHAT_ID = None
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.5-flash")

# ======================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ========================

async def _get_pinned_message_text(context: ContextTypes.DEFAULT_TYPE) -> str:
    """–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Ç–µ–∫—Å—Ç."""
    global MAIN_CHAT_ID
    if MAIN_CHAT_ID is None:
        return ""

    try:
        chat_info = await context.bot.get_chat(chat_id=MAIN_CHAT_ID)
        if chat_info.pinned_message:
            return chat_info.pinned_message.text
    except Exception:
        # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —á–∞—Ç —É–¥–∞–ª–µ–Ω
        return ""
    return ""


def _parse_tasks_from_text(text: str) -> list:
    """–†–∞–∑–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á."""
    tasks = []
    # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    lines = text.split('\n')[1:]

    # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞: [–ù–æ–º–µ—Ä]. [–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏] ( [–î–∞—Ç–∞/–°—Ç–∞—Ç—É—Å] )
    pattern = re.compile(r'^\d+\.\s+(.*?)(?:\s+\(([^)]+)\))?$')

    for line in lines:
        line = line.strip()
        if not line or line.startswith('_'):
            continue

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É
        line = line.replace('‚ùå ~', '').replace('~ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)', '').replace('‚ö†Ô∏è *', '').replace('*', '')

        match = pattern.match(line)
        if match:
            task_text = match.group(1).strip()
            deadline_or_status = match.group(2)

            deadline = None
            if deadline_or_status and re.match(r'\d{4}-\d{2}-\d{2}', deadline_or_status):
                deadline = deadline_or_status

            tasks.append({"task": task_text, "deadline": deadline})

    return tasks


async def send_long_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str, prefix: str = "üí° "):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏."""
    MAX_LENGTH = 4096
    while text:
        chunk = text[:MAX_LENGTH]
        text = text[MAX_LENGTH:]

        if prefix:
            chunk = prefix + chunk
            prefix = ""

        await context.bot.send_message(chat_id=chat_id, text=chunk)


# ... (–ö–æ–¥ add_task, update_task_message, ask_gemini, start, remove_task) ...

async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.delete()
    except:
        pass

    text = update.message.text.strip()
    if not text.startswith("-"):
        return

    task_text = text[1:].strip()
    deadline = None
    for part in task_text.split():
        try:
            if len(part.split(".")) == 3:
                deadline = datetime.strptime(part, "%d.%m.%y").strftime("%Y-%m-%d")
                task_text = task_text.replace(part, "").strip()
            elif len(part.split(".")) == 2:
                year = datetime.now().year
                deadline = datetime.strptime(f"{part}.{year}", "%d.%m.%Y").strftime("%Y-%m-%d")
                task_text = task_text.replace(part, "").strip()
        except ValueError:
            pass

    # 1. –ß–ò–¢–ê–ï–ú –°–¢–ê–†–´–ô –°–ü–ò–°–û–ö –ò–ó –ó–ê–ö–†–ï–ü–õ–ï–ù–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
    pinned_text = await _get_pinned_message_text(context)
    tasks = _parse_tasks_from_text(pinned_text)

    # 2. –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–£–Æ –ó–ê–î–ê–ß–£
    tasks.append({"task": task_text, "deadline": deadline})

    # 3. –û–ë–ù–û–í–õ–Ø–ï–ú –ó–ê–ö–†–ï–ü–õ–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
    await update_task_message(context, tasks)

    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")


async def update_task_message(context: ContextTypes.DEFAULT_TYPE, tasks: list = None):
    global MAIN_CHAT_ID

    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –∏–∑ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if tasks is None:
        pinned_text = await _get_pinned_message_text(context)
        tasks = _parse_tasks_from_text(pinned_text)

    if MAIN_CHAT_ID is None:
        return

    chat_id = MAIN_CHAT_ID
    message_id = None

    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        chat_info = await context.bot.get_chat(chat_id=chat_id)
        if chat_info.pinned_message:
            message_id = chat_info.pinned_message.message_id
    except Exception:
        return

    # –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ
    if message_id is None:
        new_msg = await context.bot.send_message(
            chat_id=chat_id,
            text="üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n_–ó–∞–¥–∞—á –Ω–µ—Ç_",
            parse_mode="Markdown"
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ó–ê–ö–†–ï–ü–ò–¢–ï —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.** –ë–æ—Ç –±—É–¥–µ—Ç –µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å.",
            reply_to_message_id=new_msg.message_id,
            parse_mode="Markdown"
        )
        return

    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É—è tasks)
    # ... (–í–ê–® –ö–û–î –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –¢–ï–ö–°–¢–ê) ...
    text = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n"
    if tasks:
        now = datetime.now()
        for i, t in enumerate(tasks, start=1):
            line = t["task"]
            if t.get("deadline"):
                try:
                    date = datetime.strptime(t["deadline"], "%Y-%m-%d")
                    days_left = (date - now).days

                    if days_left < 0:
                        line = f"‚ùå ~{line}~ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)"
                    elif days_left <= 2:
                        line = f"‚ö†Ô∏è *{line}* (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)"
                    else:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                        line = f"{line} ({t['deadline']})"
                except Exception:
                    line = f"{line} ({t['deadline']})"
            text += f"{i}. {line}\n"
    else:
        text += "_–ó–∞–¥–∞—á –Ω–µ—Ç_"

    # 5. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            parse_mode="Markdown"
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise


async def ask_gemini(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùì –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return

    question = " ".join(context.args)
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    prompt = f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}\n\n–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 3500 —Å–∏–º–≤–æ–ª–æ–≤."

    waiting_msg = await update.message.reply_text("ü§î –î—É–º–∞—é...")

    # –í—ã–∑–æ–≤ Gemini
    response = await asyncio.to_thread(model.generate_content, prompt)
    answer = response.text

    await waiting_msg.delete()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await send_long_message(context, update.message.chat_id, answer)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.delete()
    except:
        pass
    global MAIN_CHAT_ID

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if MAIN_CHAT_ID is None:
        MAIN_CHAT_ID = update.message.chat_id
        await update.message.reply_text(
            "‚úÖ ID —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

    # 2. –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–Ω–æ —Å–∞–º–æ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ)
    await update_task_message(context)


async def remove_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.delete()
    except:
        pass

    # ... (–í–∞—à –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞) ...
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    try:
        index = int(context.args[0]) - 1
    except ValueError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
        return

    # 1. –ß–ò–¢–ê–ï–ú –°–¢–ê–†–´–ô –°–ü–ò–°–û–ö –ò–ó –ó–ê–ö–†–ï–ü–õ–ï–ù–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
    pinned_text = await _get_pinned_message_text(context)
    tasks = _parse_tasks_from_text(pinned_text)

    # 2. –£–î–ê–õ–Ø–ï–ú –ó–ê–î–ê–ß–£
    if 0 <= index < len(tasks):
        tasks.pop(index)

        # 3. –û–ë–ù–û–í–õ–Ø–ï–ú –ó–ê–ö–†–ï–ü–õ–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        await update_task_message(context, tasks)
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –°–µ–π—á–∞—Å –≤ —Å–ø–∏—Å–∫–µ {len(tasks)} –∑–∞–¥–∞—á.")


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Webhook
PORT = int(os.environ.get('PORT', '8080'))
URL_PATH = os.getenv("WEBHOOK_SECRET")
WEBHOOK_URL = f"https://gods-slave.onrender.com/{URL_PATH}" # –ó–∞–º–µ–Ω–∏—Ç–µ –¥–æ–º–µ–Ω, –µ—Å–ª–∏ –æ–Ω –¥—Ä—É–≥–æ–π
SECRET_TOKEN = os.getenv("WEBHOOK_SECRET")

TOKEN = os.getenv("TOKEN")
application = Application.builder().token(TOKEN).build()
# ‚ùóÔ∏è –ù–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å initialize() –∏–ª–∏ asyncio.run(), —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç run_webhook


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞...")

    # 1. –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Application
    application = Application.builder().token(TOKEN).build()

    # 2. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("remove", remove_task))
    application.add_handler(CommandHandler("ask", ask_gemini))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_task))

    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±—Ö—É–∫. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏–∫–ª–æ–º asyncio.
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=URL_PATH,
        webhook_url=WEBHOOK_URL,
        secret_token=SECRET_TOKEN
    )

if __name__ == "__main__":
    # ‚ùóÔ∏è Uvicorn –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å main()
    main()
