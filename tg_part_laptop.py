from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime, timedelta
import json
import os

TOKEN = "7452283327:AAE1nwv-I-45qvPrEmIrLMZxxom7VP3ZMe8"  # –Ω–µ –∑–∞–±—É–¥—å –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω

TASKS_FILE = "tasks.json"
STATE_FILE = "state.json"

def load_tasks():
    if not os.path.exists(TASKS_FILE):
        return []
    with open(TASKS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_tasks(tasks):
    with open(TASKS_FILE, "w", encoding="utf-8") as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)

def load_state():
    if not os.path.exists(STATE_FILE):
        return {}
    with open(STATE_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_state(state):
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)


# ========================  –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß  ========================
async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await update.message.delete()
    except:
        pass

    text = update.message.text.strip()
    if not text.startswith("-"):
        return

    task_text = text[1:].strip()
    deadline = None

    # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã (–¥–¥.–º–º –∏–ª–∏ –¥–¥.–º–º.–≥–≥)
    for part in task_text.split():
        try:
            if len(part.split(".")) == 3:
                deadline = datetime.strptime(part, "%d.%m.%y").strftime("%Y-%m-%d")
                task_text = task_text.replace(part, "").strip()
            elif len(part.split(".")) == 2:
                year = datetime.now().year
                deadline = datetime.strptime(f"{part}.{year}", "%d.%m.%Y").strftime("%Y-%m-%d")
                task_text = task_text.replace(part, "").strip()
        except ValueError:
            pass

    tasks = load_tasks()
    tasks.append({"task": task_text, "deadline": deadline})
    save_tasks(tasks)

    await update_task_message(context)
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")


# ========================  –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê  ========================
async def update_task_message(context: ContextTypes.DEFAULT_TYPE):
    tasks = load_tasks()
    state = load_state()
    if not state:
        return

    text = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n"
    if tasks:
        now = datetime.now()
        for i, t in enumerate(tasks, start=1):
            line = t["task"]
            if t.get("deadline"):
                try:
                    date = datetime.strptime(t["deadline"], "%Y-%m-%d")
                    days_left = (date - now).days

                    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞
                    if days_left < 0:
                        line = f"‚ùå ~{line}~ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)"
                    elif days_left <= 2:
                        line = f"‚ö†Ô∏è *{line}* (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)"
                    else:
                        line = f"{line} ({t['deadline']})"
                except Exception:
                    line = f"{line} ({t['deadline']})"
            text += f"{i}. {line}\n"
    else:
        text += "_–ó–∞–¥–∞—á –Ω–µ—Ç_"

    await context.bot.edit_message_text(
        chat_id=state["chat_id"],
        message_id=state["message_id"],
        text=text,
        parse_mode="Markdown"
    )


# ========================  –°–¢–ê–†–¢  ========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start
    try:
        await update.message.delete()
    except:
        pass

    state = load_state()
    if not state:
        msg = await update.message.reply_text("üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n_–ó–∞–¥–∞—á –Ω–µ—Ç_", parse_mode="Markdown")
        save_state({"chat_id": msg.chat_id, "message_id": msg.message_id})
    else:
        await update_task_message(context)


# ========================  –£–î–ê–õ–ï–ù–ò–ï –ó–ê–î–ê–ß  ========================
async def remove_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /remove
    try:
        await update.message.delete()
    except:
        pass

    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    try:
        index = int(context.args[0]) - 1
    except ValueError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
        return

    tasks = load_tasks()
    if 0 <= index < len(tasks):
        tasks.pop(index)
        save_tasks(tasks)
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
        await update_task_message(context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")


# ========================  –ó–ê–ü–£–°–ö  ========================
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("remove", remove_task))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_task))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
