from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime, timedelta
import json
import os
import google.generativeai as genai
import asyncio

from dotenv import load_dotenv
from flask import Flask, request, jsonify


load_dotenv()
TOKEN = os.getenv("TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.5-flash")

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
TASKS = []
STATE = {}

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
def get_tasks():
    global TASKS
    return TASKS

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
def get_state():
    global STATE
    return STATE

# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ==========
async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await update.message.delete()
    except:
        pass

    text = update.message.text.strip()
    if not text.startswith("-"):
        return

    task_text = text[1:].strip()
    deadline = None

    # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã (–¥–¥.–º–º –∏–ª–∏ –¥–¥.–º–º.–≥–≥)
    for part in task_text.split():
        try:
            if len(part.split(".")) == 3:
                deadline = datetime.strptime(part, "%d.%m.%y").strftime("%Y-%m-%d")
                task_text = task_text.replace(part, "").strip()
            elif len(part.split(".")) == 2:
                year = datetime.now().year
                deadline = datetime.strptime(f"{part}.{year}", "%d.%m.%Y").strftime("%Y-%m-%d")
                task_text = task_text.replace(part, "").strip()
        except ValueError:
            pass

    global TASKS 
    
    tasks = TASKS 
    tasks.append({"task": task_text, "deadline": deadline})

    await update_task_message(context)
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")


async def update_task_message(context: ContextTypes.DEFAULT_TYPE):
    tasks = TASKS
    state = STATE
    if not state:
        return

    text = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n"
    if tasks:
        now = datetime.now()
        for i, t in enumerate(tasks, start=1):
            line = t["task"]
            if t.get("deadline"):
                try:
                    date = datetime.strptime(t["deadline"], "%Y-%m-%d")
                    days_left = (date - now).days

                    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞
                    if days_left < 0:
                        line = f"‚ùå ~{line}~ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)"
                    elif days_left <= 2:
                        line = f"‚ö†Ô∏è *{line}* (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)"
                    else:
                        line = f"{line} ({t['deadline']})"
                except Exception:
                    line = f"{line} ({t['deadline']})"
            text += f"{i}. {line}\n"
    else:
        text += "_–ó–∞–¥–∞—á –Ω–µ—Ç_"

    await context.bot.edit_message_text(
        chat_id=state["chat_id"],
        message_id=state["message_id"],
        text=text,
        parse_mode="Markdown"
    )
async def ask_gemini(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùì –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return

    question = " ".join(context.args)
    waiting_msg = await update.message.reply_text("ü§î –î—É–º–∞—é...")

    # –≤—ã–∑—ã–≤–∞–µ–º Gemini –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
    response = await asyncio.to_thread(model.generate_content, question)
    answer = response.text

    await waiting_msg.delete()  # —É–±–∏—Ä–∞–µ–º "–î—É–º–∞—é..."
    await update.message.reply_text(f"üí° {answer}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start
    try:
        await update.message.delete()
    except:
        pass

    global STATE # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    
    # state = load_state() <--- –£–î–ê–õ–ò–¢–¨
    state = STATE # <--- –ó–ê–ú–ï–ù–ò–¢–¨
    
    if not state:
        msg = await update.message.reply_text("üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n_–ó–∞–¥–∞—á –Ω–µ—Ç_", parse_mode="Markdown")
        # save_state({"chat_id": msg.chat_id, "message_id": msg.message_id}) <--- –£–î–ê–õ–ò–¢–¨
        STATE = {"chat_id": msg.chat_id, "message_id": msg.message_id} # <--- –ó–ê–ú–ï–ù–ò–¢–¨
    else:
        await update_task_message(context)


# ========================  –£–î–ê–õ–ï–ù–ò–ï –ó–ê–î–ê–ß  ========================
async def remove_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /remove
    try:
        await update.message.delete()
    except:
        pass

    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    try:
        index = int(context.args[0]) - 1
    except ValueError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
        return

    global TASKS # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    # tasks = load_tasks() <--- –£–î–ê–õ–ò–¢–¨
    tasks = TASKS # <--- –ó–ê–ú–ï–ù–ò–¢–¨
    
    if 0 <= index < len(tasks):
        tasks.pop(index)
        # save_tasks(tasks) <--- –£–î–ê–õ–ò–¢–¨
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
        await update_task_message(context)
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")


WEBHOOK_URL = "https://your-hosting-domain.com/webhook"
SECRET_TOKEN = os.getenv("WEBHOOK_SECRET")
application = Application.builder().token(TOKEN).build()

application.initialize() 

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("remove", remove_task))
application.add_handler(CommandHandler("ask", ask_gemini))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_task))

app = Flask(__name__)

@app.route('/')
def home():
    return "I'm alive!"

@app.route("/" + SECRET_TOKEN, methods=["POST"])
async def webhook_handler():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram."""
    update = Update.de_json(request.get_json(), application.bot)
    await application.process_update(update)
    return jsonify({"status": "ok"})



# –í–∞—à —Ö–æ—Å—Ç–∏–Ω–≥-–ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é,
# –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å WSGI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ cPanel.

# –¢–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ —è–≤–ª—è–µ—Ç—Å—è "app".





