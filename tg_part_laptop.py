# tg_part_laptop.py

import os
import re
import json
from datetime import datetime
from contextlib import asynccontextmanager

from telegram import Update, error
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from fastapi import FastAPI, Request, Response
import google.generativeai as genai

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
TOKEN = os.getenv("TOKEN")
TARGET_CHAT_ID = os.getenv("TARGET_CHAT_ID")
MESSAGE_ID_TO_EDIT = os.getenv("MESSAGE_ID_TO_EDIT")
# ‚ùóÔ∏è –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
REMINDER_SECRET = os.getenv("REMINDER_SECRET", "default-secret-key")

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel("gemini-2.5-flash")
else:
    model = None


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def parse_date_from_text(text: str) -> (str, str):
    """
    –ò—â–µ—Ç –¥–∞—Ç—É –≤ —Ç–µ–∫—Å—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ç–µ–∫—Å—Ç_–±–µ–∑_–¥–∞—Ç—ã, –¥–∞—Ç–∞_–≤_ISO_—Ñ–æ—Ä–º–∞—Ç–µ_YYYY-MM-DD).
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
    - 31.10.2025
    - 31.10.25
    - 31.10 (–ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥)
    """
    date_obj = None
    task_text = text

    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞—Ç—ã (DD.MM.YYYY)
    match = re.search(r'(\d{1,2}\.\d{1,2}\.\d{4})', text)
    if match:
        date_str = match.group(1)
        try:
            date_obj = datetime.strptime(date_str, "%d.%m.%Y").date()
            task_text = text.replace(date_str, "").strip()
        except ValueError:
            pass  # –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞

    # –ó–∞—Ç–µ–º –∏—â–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–∞—Ç—ã (DD.MM.YY)
    if not date_obj:
        match = re.search(r'(\d{1,2}\.\d{1,2}\.\d{2})', text)
        if match:
            date_str = match.group(1)
            try:
                date_obj = datetime.strptime(date_str, "%d.%m.%y").date()
                task_text = text.replace(date_str, "").strip()
            except ValueError:
                pass

    # –ó–∞—Ç–µ–º –∏—â–µ–º –¥–∞—Ç—ã –±–µ–∑ –≥–æ–¥–∞ (DD.MM)
    if not date_obj:
        match = re.search(r'(\d{1,2}\.\d{1,2})', text)
        if match:
            date_str = match.group(1)
            try:
                current_year = datetime.now().year
                date_obj = datetime.strptime(f"{date_str}.{current_year}", "%d.%m.%Y").date()
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
                if date_obj < datetime.now().date():
                    date_obj = datetime.strptime(f"{date_str}.{current_year + 1}", "%d.%m.%Y").date()

                task_text = text.replace(date_str, "").strip()
            except ValueError:
                pass

    if date_obj:
        return task_text.strip(), date_obj.strftime("%Y-%m-%d")

    # –ï—Å–ª–∏ –¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    return text.strip(), None


def parse_tasks_from_text(text: str) -> list:
    """–ü–∞—Ä—Å–∏—Ç –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    if not text: return []
    tasks, lines = [], text.split('\n')[1:]
    pattern = re.compile(r'^\d+\.\s+(.*?)(?:\s+\(([^)]+)\))?$')
    for line in lines:
        line = line.strip().replace('‚ùå ~', '').replace('~ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)', '').replace('‚ö†Ô∏è *', '').replace('*', '')
        if not line: continue
        match = pattern.match(line)
        if match:
            task_text = match.group(1).strip()
            deadline_str = match.group(2) if match.group(2) and re.match(r'\d{4}-\d{2}-\d{2}', match.group(2)) else None
            tasks.append({"task": task_text, "deadline": deadline_str})
    return tasks


async def get_tasks_from_message(context: ContextTypes.DEFAULT_TYPE) -> list:
    """–ß–∏—Ç–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á."""
    if not TARGET_CHAT_ID: return []
    try:
        chat_info = await context.bot.get_chat(chat_id=TARGET_CHAT_ID)
        if chat_info.pinned_message:
            return parse_tasks_from_text(chat_info.pinned_message.text)
        return []
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        return []


async def update_tasks_message(context: ContextTypes.DEFAULT_TYPE, tasks: list):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
    if not (TARGET_CHAT_ID and MESSAGE_ID_TO_EDIT):
        print("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return

    text = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n"
    if not tasks:
        text += "_–ó–∞–¥–∞—á –Ω–µ—Ç_"
    else:
        now = datetime.now()
        # ‚ùóÔ∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –¥–µ–¥–ª–∞–π–Ω–∞. –ó–∞–¥–∞—á–∏ –±–µ–∑ –¥–∞—Ç—ã - –≤ –∫–æ–Ω—Ü–µ.
        sorted_tasks = sorted(tasks, key=lambda x: datetime.strptime(x['deadline'], '%Y-%m-%d') if x[
            'deadline'] else datetime.max)
        for i, t in enumerate(sorted_tasks, start=1):
            line = t["task"]
            if t.get("deadline"):
                # ‚ùóÔ∏è –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ "—Ä–∞—Å–∫—Ä–∞—Å–∫–∏" (–æ–Ω–∞ –∏–¥–µ–∞–ª—å–Ω–∞)
                date = datetime.strptime(t["deadline"], "%Y-%m-%d")
                days_left = (date.date() - now.date()).days
                if days_left < 0:
                    line = f"‚ùå ~{line}~ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)"
                elif days_left <= 2:
                    line = f"‚ö†Ô∏è *{line}* (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)"
                else:
                    line = f"{line} ({t['deadline']})"
            text += f"{i}. {line}\n"

    try:
        await context.bot.edit_message_text(text, chat_id=TARGET_CHAT_ID, message_id=MESSAGE_ID_TO_EDIT,
                                            parse_mode="Markdown")
    except error.BadRequest as e:
        if "message is not modified" not in str(e): print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


# --- –ö–æ–º–∞–Ω–¥—ã ---

async def setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    setup_msg = await update.message.reply_text("–°–æ–∑–¥–∞—é —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á...")
    message_id_to_edit = setup_msg.message_id
    try:
        await context.bot.pin_chat_message(
            chat_id=user_id,
            message_id=message_id_to_edit,
            disable_notification=True
        )
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        return
    await setup_msg.edit_text(
        "**–≠—Ç–æ —Ç–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á.**\n\n"
        "**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:**\n"
        "1. –ó–∞–π–¥–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render.\n"
        "2. `TARGET_CHAT_ID`:\n"
        f"`{user_id}`\n"
        "3. `MESSAGE_ID_TO_EDIT`:\n"
        f"`{message_id_to_edit}`\n"
        "4. (–î–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π) `REMINDER_SECRET`: –ø—Ä–∏–¥—É–º–∞–π –∏ –≤–ø–∏—à–∏ –ª—é–±–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á.\n"
        "5. –°–æ—Ö—Ä–∞–Ω–∏. Render –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞.\n\n"
        "–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ."
    )


async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‚ùóÔ∏è –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ‚ùóÔ∏è"""
    tasks = await get_tasks_from_message(context)
    text = update.message.text.strip().lstrip('-').strip()

    # ‚ùóÔ∏è –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
    task_text, deadline_iso = parse_date_from_text(text)

    tasks.append({"task": task_text, "deadline": deadline_iso})
    await update_tasks_message(context, tasks)
    await update.message.delete()


async def remove_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = await get_tasks_from_message(context)
    try:
        index = int(context.args[0]) - 1
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è, —á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å—ã —Å–æ–≤–ø–∞–¥–∞–ª–∏
        sorted_tasks_with_indices = sorted(
            enumerate(tasks),
            key=lambda x: datetime.strptime(x[1]['deadline'], '%Y-%m-%d') if x[1]['deadline'] else datetime.max
        )
        if 0 <= index < len(tasks):
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏ –∏–∑ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            original_index = sorted_tasks_with_indices[index][0]
            # –£–¥–∞–ª—è–µ–º –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
            tasks.pop(original_index)
            await update_tasks_message(context, tasks)
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.", quote=False)
    await update.message.delete()


async def ask_gemini(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not model:
        await update.message.reply_text("–ö–ª—é—á Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return
    if not context.args:
        await update.message.reply_text("‚ùì –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return
    question = " ".join(context.args)
    prompt = f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}\n\n–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º."
    waiting_msg = await update.message.reply_text("ü§î –î—É–º–∞—é...")
    response = await model.generate_content_async(prompt)
    await waiting_msg.edit_text(response.text)


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ FastAPI ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    if TOKEN: await application.initialize()
    yield
    if TOKEN: await application.shutdown()


api = FastAPI(lifespan=lifespan)
application = Application.builder().token(TOKEN).build()

application.add_handler(CommandHandler("setup", setup))
application.add_handler(CommandHandler("remove", remove_task))
application.add_handler(CommandHandler("ask", ask_gemini))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_task))

URL_PATH = os.getenv("WEBHOOK_SECRET", "webhook")


@api.post(f"/{URL_PATH}")
async def process_telegram_update(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return Response(status_code=200)
    except Exception as e:
        print(f"Error processing update: {e}")
        return Response(status_code=500)


# --- ‚ùóÔ∏è –ß–∞—Å—Ç—å 2: –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚ùóÔ∏è ---
@api.post(f"/check_reminders/{REMINDER_SECRET}")
async def check_reminders_endpoint():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–µ—Ä–≥–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π cron-job.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞...")
    if not (TARGET_CHAT_ID and application.bot):
        print("TARGET_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤.")
        return Response(status_code=500, content="Bot not ready")

    bot = application.bot
    tasks = []
    try:
        chat_info = await bot.get_chat(chat_id=TARGET_CHAT_ID)
        if chat_info.pinned_message:
            tasks = parse_tasks_from_text(chat_info.pinned_message.text)
        else:
            return Response(status_code=200, content="No pinned message")
    except Exception as e:
        return Response(status_code=500, content=f"Error reading message: {e}")

    today = datetime.now().date()
    reminders_sent = []

    for task in tasks:
        if task.get("deadline"):
            try:
                deadline_date = datetime.strptime(task["deadline"], "%Y-%m-%d").date()
                days_left = (deadline_date - today).days

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –°–ï–ì–û–î–ù–Ø
                if days_left == 0:
                    reminder_text = f"‚ùóÔ∏è **–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï (–¥–µ–¥–ª–∞–π–Ω —Å–µ–≥–æ–¥–Ω—è):**\n{task['task']}"
                    await bot.send_message(chat_id=TARGET_CHAT_ID, text=reminder_text, parse_mode="Markdown")
                    reminders_sent.append(task['task'])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –ó–ê–í–¢–†–ê
                elif days_left == 1:
                    reminder_text = f"üîî **–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï (–¥–µ–¥–ª–∞–π–Ω –∑–∞–≤—Ç—Ä–∞):**\n{task['task']}"
                    await bot.send_message(chat_id=TARGET_CHAT_ID, text=reminder_text, parse_mode="Markdown")
                    reminders_sent.append(task['task'])
            except ValueError:
                continue

    if reminders_sent:
        return Response(status_code=200, content=f"Sent reminders for: {reminders_sent}")

    return Response(status_code=200, content="No reminders to send")
