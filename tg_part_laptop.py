from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime, timedelta
import json
import os
import google.generativeai as genai
import asyncio
from asgiref.wsgi import WsgiToAsgi
from dotenv import load_dotenv
from flask import Flask, request, jsonify

load_dotenv()
TOKEN = os.getenv("TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.5-flash")

TASKS = []
MAIN_CHAT_ID = None

async def _get_pinned_message_text(context: ContextTypes.DEFAULT_TYPE) -> str:
    global MAIN_CHAT_ID
    if MAIN_CHAT_ID is None:
        return ""

    try:
        chat_info = await context.bot.get_chat(chat_id=MAIN_CHAT_ID)
        if chat_info.pinned_message:
            return chat_info.pinned_message.text
    except Exception:
        # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
        return ""
    return ""

def get_tasks():
    global TASKS
    return TASKS


import re


def _parse_tasks_from_text(text: str) -> list:
    """–†–∞–∑–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á."""
    tasks = []
    # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    lines = text.split('\n')[1:]

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞, —Ç–µ–∫—Å—Ç–∞ –∏ –¥–µ–¥–ª–∞–π–Ω–∞
    # –û–Ω–æ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏: [–ù–æ–º–µ—Ä]. [–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏] ( [–î–∞—Ç–∞/–°—Ç–∞—Ç—É—Å] )
    pattern = re.compile(r'^\d+\.\s+(.*?)(?:\s+\(([^)]+)\))?$')

    for line in lines:
        line = line.strip()
        if not line or line.startswith('_'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ "_–ó–∞–¥–∞—á –Ω–µ—Ç_"
            continue

        # –£–±–∏—Ä–∞–µ–º Markdown –∏ —ç–º–æ–¥–∑–∏-—Å—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –¥–æ–±–∞–≤–ª—è–µ–º
        line = line.replace('‚ùå ~', '').replace('~ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)', '').replace('‚ö†Ô∏è *', '').replace('*', '')

        match = pattern.match(line)
        if match:
            # –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ (–≥—Ä—É–ø–ø–∞ 1)
            task_text = match.group(1).strip()
            # –î–µ–¥–ª–∞–π–Ω –∏–ª–∏ —Å—Ç–∞—Ç—É—Å (–≥—Ä—É–ø–ø–∞ 2)
            deadline_or_status = match.group(2)

            deadline = None
            if deadline_or_status:
                # –ï—Å–ª–∏ —ç—Ç–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
                if re.match(r'\d{4}-\d{2}-\d{2}', deadline_or_status):
                    deadline = deadline_or_status
                # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ç—É—Å ("–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ", "–æ—Å—Ç–∞–ª–æ—Å—å N –¥–Ω."), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –¥–∞—Ç—É

            tasks.append({"task": task_text, "deadline": deadline})

    return tasks

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
def get_state():
    global STATE
    return STATE


# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ==========

async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.delete()
    except:
        pass

    text = update.message.text.strip()
    if not text.startswith("-"):
        return



    task_text = text[1:].strip()
    deadline = None
    for part in task_text.split():
        try:
            if len(part.split(".")) == 3:
                deadline = datetime.strptime(part, "%d.%m.%y").strftime("%Y-%m-%d")
                task_text = task_text.replace(part, "").strip()
            elif len(part.split(".")) == 2:
                year = datetime.now().year
                deadline = datetime.strptime(f"{part}.{year}", "%d.%m.%Y").strftime("%Y-%m-%d")
                task_text = task_text.replace(part, "").strip()
        except ValueError:
            pass


    # ‚ùóÔ∏è 1. –ß–ò–¢–ê–ï–ú –°–¢–ê–†–´–ô –°–ü–ò–°–û–ö –ò–ó –ó–ê–ö–†–ï–ü–õ–ï–ù–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
    pinned_text = await _get_pinned_message_text(context)
    tasks = _parse_tasks_from_text(pinned_text) # <-- –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞

    # 2. –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–£–Æ –ó–ê–î–ê–ß–£
    tasks.append({"task": task_text, "deadline": deadline})

    # 3. –û–ë–ù–û–í–õ–Ø–ï–ú –ó–ê–ö–†–ï–ü–õ–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
    await update_task_message(context, tasks) # –ü–µ—Ä–µ–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫

    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")


async def update_task_message(context: ContextTypes.DEFAULT_TYPE, tasks: list = None):
        global MAIN_CHAT_ID
        chat_id = MAIN_CHAT_ID
        try:
            chat_info = await context.bot.get_chat(chat_id=chat_id)
        except:
            pass
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –∏–∑ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if tasks is None:
            pinned_text = await _get_pinned_message_text(context)
            tasks = _parse_tasks_from_text(pinned_text)

        # ... (–í–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç tasks) ...

        if MAIN_CHAT_ID is None:
            return

        chat_id = MAIN_CHAT_ID
        message_id = None

        if chat_info.pinned_message:
            message_id = chat_info.pinned_message.message_id
        try:
            chat_info = await context.bot.get_chat(chat_id=chat_id)
            if chat_info.pinned_message:
                message_id = chat_info.pinned_message.message_id
        except Exception:
            return

        if message_id is None:
            return

            # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ (–ò—Å–ø–æ–ª—å–∑—É–µ–º tasks, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω/–∑–∞–≥—Ä—É–∂–µ–Ω)
        text = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n"
        if tasks:
            now = datetime.now()
            # ... (–í–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞) ...
            for i, t in enumerate(tasks, start=1):
                line = t["task"]
                # ... (–ö–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–¥–ª–∞–π–Ω–∞) ...
                if t.get("deadline"):
                    try:
                        date = datetime.strptime(t["deadline"], "%Y-%m-%d")
                        days_left = (date - now).days

                        if days_left < 0:
                            line = f"‚ùå ~{line}~ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)"
                        elif days_left <= 2:
                            line = f"‚ö†Ô∏è *{line}* (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)"
                        else:
                            line = f"{line} ({t['deadline']})"
                    except Exception:
                        line = f"{line} ({t['deadline']})"
                text += f"{i}. {line}\n"
        else:
            text += "_–ó–∞–¥–∞—á –Ω–µ—Ç_"

        # 5. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                parse_mode="Markdown"
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise




    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ (–ö–û–î –û–°–¢–ê–ï–¢–°–Ø –ü–†–ï–ñ–ù–ò–ú)
        text = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n"
        if tasks:
            now = datetime.now()
            for i, t in enumerate(tasks, start=1):
                line = t["task"]
                if t.get("deadline"):
                    try:
                        date = datetime.strptime(t["deadline"], "%Y-%m-%d")
                        days_left = (date - now).days

                        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞
                        if days_left < 0:
                            line = f"‚ùå ~{line}~ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)"
                        elif days_left <= 2:
                            line = f"‚ö†Ô∏è *{line}* (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)"
                        else:
                            line = f"{line} ({t['deadline']})"
                    except Exception:
                        line = f"{line} ({t['deadline']})"
                text += f"{i}. {line}\n"
        else:
            text += "_–ó–∞–¥–∞—á –Ω–µ—Ç_"

        # 5. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            parse_mode="Markdown"
        )

async def ask_gemini(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùì –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return

    question = " ".join(context.args)
    waiting_msg = await update.message.reply_text("ü§î –î—É–º–∞—é...")

    # –≤—ã–∑—ã–≤–∞–µ–º Gemini –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
    response = await asyncio.to_thread(model.generate_content, question)
    answer = response.text

    await waiting_msg.delete()  # —É–±–∏—Ä–∞–µ–º "–î—É–º–∞—é..."
    await update.message.reply_text(f"üí° {answer}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start
    try:
        await update.message.delete()
    except:
        pass

    global MAIN_CHAT_ID

    if MAIN_CHAT_ID is None:
        MAIN_CHAT_ID = update.message.chat_id
        await update.message.reply_text("‚úÖ ID —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

    # 2. –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–Ω–æ —Å–∞–º–æ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ)
    await update_task_message(context)


# ========================  –£–î–ê–õ–ï–ù–ò–ï –ó–ê–î–ê–ß  ========================


async def remove_task(update: Update, context: ContextTypes.DEFAULT_TYPE):

    try:
        await update.message.delete()
    except:
        pass


    # ... (–í–∞—à –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞) ...
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    try:
        index = int(context.args[0]) - 1
    except ValueError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
        return

    # ‚ùóÔ∏è 1. –ß–ò–¢–ê–ï–ú –°–¢–ê–†–´–ô –°–ü–ò–°–û–ö –ò–ó –ó–ê–ö–†–ï–ü–õ–ï–ù–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
    pinned_text = await _get_pinned_message_text(context)
    tasks = _parse_tasks_from_text(pinned_text)

    # 2. –£–î–ê–õ–Ø–ï–ú –ó–ê–î–ê–ß–£
    if 0 <= index < len(tasks):
        tasks.pop(index)

        # 3. –û–ë–ù–û–í–õ–Ø–ï–ú –ó–ê–ö–†–ï–ü–õ–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        await update_task_message(context, tasks)  # –ü–µ—Ä–µ–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä! –°–µ–π—á–∞—Å –≤ —Å–ø–∏—Å–∫–µ {len(tasks)} –∑–∞–¥–∞—á.")











WEBHOOK_URL = "https://gods-slave.onrender.com/"
SECRET_TOKEN = os.getenv("WEBHOOK_SECRET")
application = Application.builder().token(TOKEN).build()


async def init_application():
    await application.initialize()


try:
    asyncio.run(init_application())
except RuntimeError as e:
    if 'cannot run' in str(e).lower():
        pass
    else:
        raise

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("remove", remove_task))
application.add_handler(CommandHandler("ask", ask_gemini))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_task))

app = Flask(__name__)
asgi_app = WsgiToAsgi(app)

@app.route('/')
def home():
    return "I'm alive!"


@app.route("/" + SECRET_TOKEN, methods=["POST"])
async def webhook_handler():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram."""
    update = Update.de_json(request.get_json(), application.bot)
    await application.process_update(update)
    return jsonify({"status": "ok"})







